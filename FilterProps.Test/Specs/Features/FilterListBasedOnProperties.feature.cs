// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.17379
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace FilterProps.Test.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FilterAListBasedOnSomePropertiesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "FilterListBasedOnProperties.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Filter a list based on some properties", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Filter a list based on some properties")))
            {
                FilterProps.Test.Specs.Features.FilterAListBasedOnSomePropertiesFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Gender",
                        "IsInternational"});
            table1.AddRow(new string[] {
                        "Jesse",
                        "Fredericks",
                        "Male",
                        "false"});
            table1.AddRow(new string[] {
                        "Elenor",
                        "Ruel",
                        "Female",
                        "true"});
            table1.AddRow(new string[] {
                        "Hàn Ngọc",
                        "Trai",
                        "Female",
                        "true"});
            table1.AddRow(new string[] {
                        "Catherine",
                        "Jackson",
                        "Female",
                        "false"});
            table1.AddRow(new string[] {
                        "Mahjub Khalid",
                        "Khalid",
                        "Male",
                        "true"});
            table1.AddRow(new string[] {
                        "Ashwaq Jawahir",
                        "Shalhoub",
                        "Male",
                        "false"});
            table1.AddRow(new string[] {
                        "Douglas",
                        "Rego",
                        "Male",
                        "false"});
            table1.AddRow(new string[] {
                        "Jose",
                        "Kitterman",
                        "Female",
                        "false"});
            table1.AddRow(new string[] {
                        "Nancy",
                        "Jackson",
                        "Female",
                        "false"});
            table1.AddRow(new string[] {
                        "Jose",
                        "Roberts",
                        "Male",
                        "false"});
            table1.AddRow(new string[] {
                        "Bob",
                        "Jackson",
                        "Male",
                        "false"});
            table1.AddRow(new string[] {
                        "Bobby",
                        "Rackson",
                        "Female",
                        "false"});
            table1.AddRow(new string[] {
                        "Boba",
                        "Bob Jackson",
                        "Female",
                        "false"});
#line 4
 testRunner.Given("These students:", ((string)(null)), table1);
#line hidden
        }
        
        public virtual void FilterStudentsThatSatisfiesFirstname(string firstName, string lastName, string gender, string isInternational, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter students that satisfies firstname", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 21
 testRunner.And(string.Format("I add a filter where FirstName is {0}", firstName));
#line 22
 testRunner.When("I apply the filters");
#line 23
 testRunner.Then(string.Format("The student list should contain {0}", firstName));
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter students that satisfies firstname")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Filter a list based on some properties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Should showup on the list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Jesse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FirstName", "Jesse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LastName", "Fredericks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Gender", "Male")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsInternational", "false")]
        public virtual void FilterStudentsThatSatisfiesFirstname_ShouldShowupOnTheList_Jesse()
        {
            this.FilterStudentsThatSatisfiesFirstname("Jesse", "Fredericks", "Male", "false", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter students that satisfies firstname")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Filter a list based on some properties")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("ExampleSetName", "Should showup on the list")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Elenor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:FirstName", "Elenor")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:LastName", "Ruel")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Gender", "Female")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:IsInternational", "true")]
        public virtual void FilterStudentsThatSatisfiesFirstname_ShouldShowupOnTheList_Elenor()
        {
            this.FilterStudentsThatSatisfiesFirstname("Elenor", "Ruel", "Female", "true", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter students that share common firstname")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Filter a list based on some properties")]
        public virtual void FilterStudentsThatShareCommonFirstname()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter students that share common firstname", ((string[])(null)));
#line 32
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 34
 testRunner.And("I add a filter where FirstName is Jose");
#line 35
 testRunner.When("I apply the filters");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Gender",
                        "IsInternational"});
            table2.AddRow(new string[] {
                        "Jose",
                        "Kitterman",
                        "Female",
                        "false"});
            table2.AddRow(new string[] {
                        "Jose",
                        "Roberts",
                        "Male",
                        "false"});
#line 36
 testRunner.Then("These students should be on the list", ((string)(null)), table2);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter students that share common lastname")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Filter a list based on some properties")]
        public virtual void FilterStudentsThatShareCommonLastname()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter students that share common lastname", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 44
 testRunner.And("I add a filter where LastName is Jackson");
#line 45
 testRunner.When("I apply the filters");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Gender",
                        "IsInternational"});
            table3.AddRow(new string[] {
                        "Catherine",
                        "Jackson",
                        "Female",
                        "false"});
            table3.AddRow(new string[] {
                        "Nancy",
                        "Jackson",
                        "Female",
                        "false"});
            table3.AddRow(new string[] {
                        "Bob",
                        "Jackson",
                        "Male",
                        "false"});
#line 46
 testRunner.Then("These students should be on the list", ((string)(null)), table3);
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter students that contains common lastname")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Filter a list based on some properties")]
        public virtual void FilterStudentsThatContainsCommonLastname()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter students that contains common lastname", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 55
 testRunner.And("I add a filter where LastName contains Jackson");
#line 56
 testRunner.When("I apply the filters");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Gender",
                        "IsInternational"});
            table4.AddRow(new string[] {
                        "Catherine",
                        "Jackson",
                        "Female",
                        "false"});
            table4.AddRow(new string[] {
                        "Nancy",
                        "Jackson",
                        "Female",
                        "false"});
            table4.AddRow(new string[] {
                        "Bob",
                        "Jackson",
                        "Male",
                        "false"});
            table4.AddRow(new string[] {
                        "Boba",
                        "Bob Jackson",
                        "Female",
                        "false"});
#line 57
 testRunner.Then("These students should be on the list", ((string)(null)), table4);
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
